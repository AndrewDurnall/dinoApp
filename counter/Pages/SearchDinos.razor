@page "/searchDinos"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Search the Dino's</h1>
<div>
    <input type="text" @bind="@searchQuery" />
    <button class="btn btn-primary" style="margin: 10px 0px 10px 0px" @onclick="FilterDinosaurs">Search The Dino's</button>
</div>

@if (getDataError)
{
    <p>Unable to get data from the API. Please try again later.</p>
}
else if (string.IsNullOrWhiteSpace(searchQuery))
{
    <p>The search wont work without letters....</p>
}

else
{
    <ul>
        @foreach (var data in filteredDinosaurs)
        {
            <li>
                <strong>Name:</strong> @data.Name<br />
                <strong>Description:</strong> @data.Description<br />
            </li>
        }
    </ul>
}

@code {
    private List<YourApiData> apiData = new List<YourApiData>(); 
    private List<YourApiData> filteredDinosaurs;
    private bool getDataError;
    private bool isDataLoaded;
    private string searchQuery;

    private async Task LoadData()
    {
        try
        {
            var apiUrl = "https://dinosaur-facts-api.shultzlab.com/dinosaurs";
            var client = ClientFactory.CreateClient();

            var response = await client.GetStreamAsync(apiUrl);
            apiData = await JsonSerializer.DeserializeAsync<List<YourApiData>>(response);
            isDataLoaded = true;
            getDataError = false;
        }
        catch (Exception)
        {
            getDataError = true;
        }
    }

    private async Task FilterDinosaurs()
    {
        await LoadData(); // Ensure data is loaded before filtering

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            if (filteredDinosaurs == null || filteredDinosaurs.Count == 0)
            {
                filteredDinosaurs = apiData
                    .Where(d => d.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else
            {
                filteredDinosaurs = apiData
                    .Where(d => d.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
        }
        else
        {
            filteredDinosaurs = null;
        }
    }


    public class YourApiData
    {
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Description")]
        public string Description { get; set; }
    }
}
